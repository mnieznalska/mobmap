using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Microsoft.WindowsMobile.DirectX.Direct3D;
using Microsoft.WindowsMobile.DirectX;

namespace MOBMAP.Geometry
{
    public class Circle
    {
        private Geometry.Point _O;
        private double _R;
        private double rSqrt;
        private Geometry.Point _p1, _p2, _p3;


        public Circle(Geometry.Point p1, Geometry.Point p2, Geometry.Point p3)
        {
            this.p1 = p1;
            this.p2 = p2;
            this.p3 = p3;

            calcCircumcenter();
            calcRadius();

         }


        #region getters & setters

        public Geometry.Point O
        {
            get { return _O; }
            set { _O = value; }
        }

        public Geometry.Point p1
        {
            get { return _p1; }
            set { _p1 = value; }
        }

        public Geometry.Point p2
        {
            get { return _p2; }
            set { _p2 = value; }
        }

        public Geometry.Point p3
        {
            get { return _p3; }
            set { _p3 = value; }
        }

        public double R
        {
            get { return _R; }
            set { _R = value; }
        }

        #endregion

        private void calcRadius()
        {
            double dx = p2.X - O.X;
            double dy = p2.Y - O.Y;
            rSqrt = dx * dx + dy * dy;
            R = Math.Sqrt(rSqrt);
        }

        private void calcCircumcenter()
        {
            double w1, w2;
            double wx1, wx2;
            double wy1, wy2;

            if (System.Math.Abs(p2.Y - p1.Y) < double.Epsilon)
            {
                w2 = -(p3.X - p2.X) / (p3.Y - p2.Y);
                wx2 = (p2.X + p3.X) * 0.5;
                wy2 = (p2.Y + p3.Y) * 0.5;
                
                //Calculate Circumcenter O(x,y)
                O = new Geometry.Point((float)((p2.X + p1.X) * 0.5), (float)(w2 * (((p2.X + p1.X) * 0.5) - wx2) + wy2));
            }
            else if (System.Math.Abs(p3.Y - p2.Y) < double.Epsilon)
            {
                w1 = -(p2.X - p1.X) / (p2.Y - p1.Y);
                wx1 = (p1.X + p2.X) * 0.5;
                wy1 = (p1.Y + p2.Y) * 0.5;

                //Calculate Circumcenter O(x,y)
                O = new Geometry.Point((float)((p3.X + p2.X) * 0.5), (float)(w1 * (((p3.X + p2.X) * 0.5) - wx1) + wy1));
            }
            else
            {
                w1 = -(p2.X - p1.X) / (p2.Y - p1.Y);
                w2 = -(p3.X - p2.X) / (p3.Y - p2.Y);
                wx1 = (p1.X + p2.X) * 0.5;
                wx2 = (p2.X + p3.X) * 0.5;
                wy1 = (p1.Y + p2.Y) * 0.5;
                wy2 = (p2.Y + p3.Y) * 0.5;
                
                //Calculate Circumcenter O(x,y)
                O = new Geometry.Point((float)((w1 * wx1 - w2 * wx2 + wy2 - wy1) / (w1 - w2)),
                    (float)(w1 * (((w1 * wx1 - w2 * wx2 + wy2 - wy1) / (w1 - w2)) - wx1) + wy1));
            }
        }

        public bool isInCircle(Geometry.Point p)
        {
            double dx = p.X - O.X;
            double dy = p.Y - O.Y;
            
            double drSqrt = dx * dx + dy * dy;

            return (drSqrt <= rSqrt);
        }
    }
}
