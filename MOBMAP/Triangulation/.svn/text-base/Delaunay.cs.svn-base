using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;


namespace MOBMAP.Triangulation
{
    public class Delaunay
    {
        private List<Geometry.Point> _pointList;
        private List<Geometry.Triangle> _triangleList;
        private List<Geometry.Edge> _edgeList;
        public float minX=0;
        public float minY = 0;
        public float minZ = 0;
        public float maxX = 0;
        public float maxY = 0;
        public float maxZ = 0;
        public float dx, dy, dz;
        public Delaunay()
        {
            pointList = new List<Geometry.Point>();
        }

        #region getters & setters

        public List<Geometry.Triangle> triangleList
        {
            get { return _triangleList; }
            set { _triangleList = value; }
        }

        public List<Geometry.Point> pointList
        {
            get { return _pointList; }
            set { _pointList = value; }
        }

        public List<Geometry.Edge> edgeList
        {
            get { return _edgeList; }
            set { _edgeList = value; }
        }

        #endregion

        public void triangulate()
        {
            triangleList = delaunayTriangulate(pointList);           
        }

        //Delaunay triangulation
        public /*static*/ List<Geometry.Triangle> delaunayTriangulate(List<Geometry.Point> Vertex)
        {
            int nv = Vertex.Count;
            if (nv < 3)
                throw new ArgumentException("Need at least three vertices for triangulation");

            int trimax = 4 * nv;

            // Find the maximum and minimum vertex bounds.
            // This is to allow calculation of the bounding supertriangle
            float xmin = Vertex[0].X;
            float ymin = Vertex[0].Y;
            float zmin = Vertex[0].Z;
            float xmax = xmin;
            float ymax = ymin;
            float zmax = zmin;
            for (int i = 1; i < nv; i++)
            {
                if (Vertex[i].X < xmin) xmin = Vertex[i].X;
                if (Vertex[i].X > xmax) xmax = Vertex[i].X;
                if (Vertex[i].Y < ymin) ymin = Vertex[i].Y;
                if (Vertex[i].Y > ymax) ymax = Vertex[i].Y;
                if (Vertex[i].Z < zmin) zmin = Vertex[i].Z;
                if (Vertex[i].Z > zmax) zmax = Vertex[i].Z;
            }

            minX = xmin;
            minY = ymin;
            minZ = zmin;
            maxX = xmax;
            maxY = ymax;
            maxZ = zmax;

            dx = xmax - xmin;
            dy = ymax - ymin;
            dz = zmax - zmin;
            float dmax = (dx > dy) ? dx : dy;

            float xmid = (float)((xmax + xmin) * 0.5);
            float ymid = (float)((ymax + ymin) * 0.5);


            // Set up the supertriangle
            // This is a triangle which encompasses all the sample points.
            // The supertriangle coordinates are added to the end of the
            // vertex list. The supertriangle is the first triangle in
            // the triangle list.
            Vertex.Add(new Geometry.Point((xmid - 2 * dmax), (ymid - dmax)));
            Vertex.Add(new Geometry.Point(xmid, (ymid + 2 * dmax)));
            Vertex.Add(new Geometry.Point((xmid + 2 * dmax), (ymid - dmax)));
            List<Geometry.Triangle> Triangle = new List<Geometry.Triangle>();
            Triangle.Add(new Geometry.Triangle(nv, nv + 1, nv + 2)); //SuperTriangle placed at index 0

            // Include each point one at a time into the existing mesh
            for (int i = 0; i < nv; i++)
            {
                List<Geometry.Edge> Edges = new List<Geometry.Edge>(); //[trimax * 3];
                // Set up the edge buffer.
                // If the point (Vertex(i).x,Vertex(i).y) lies inside the circumcircle then the
                // three edges of that triangle are added to the edge buffer and the triangle is removed from list.
                for (int j = 0; j < Triangle.Count; j++)
                {
                    if (InCircle(Vertex[i], Vertex[Triangle[j].indexP1], Vertex[Triangle[j].indexP2], Vertex[Triangle[j].indexP3]))
                    {
                        Edges.Add(new Geometry.Edge(Triangle[j].indexP1, Triangle[j].indexP2));
                        Edges.Add(new Geometry.Edge(Triangle[j].indexP2, Triangle[j].indexP3));
                        Edges.Add(new Geometry.Edge(Triangle[j].indexP3, Triangle[j].indexP1));
                        Triangle.RemoveAt(j);
                        j--;
                    }
                }
                if (i >= nv) continue; //In case we the last duplicate point we removed was the last in the array

                // Remove duplicate edges
                // Note: if all triangles are specified anticlockwise then all
                // interior edges are opposite pointing in direction.
                for (int j = Edges.Count - 2; j >= 0; j--)
                {
                    for (int k = Edges.Count - 1; k >= j + 1; k--)
                    {
                        if (Edges[j].Equals(Edges[k]))
                        {
                            Edges.RemoveAt(k);
                            Edges.RemoveAt(j);
                            k--;
                            continue;
                        }
                    }
                }
                // Form new triangles for the current point
                // Skipping over any tagged edges.
                // All edges are arranged in clockwise order.
                for (int j = 0; j < Edges.Count; j++)
                {
                    if (Triangle.Count >= trimax)
                        throw new ApplicationException("Exceeded maximum edges");
                    Triangle.Add(new Geometry.Triangle(Edges[j].indexP1, Edges[j].indexP2, i));
                }
                Edges.Clear();
                Edges = null;
            }
            // Remove triangles with supertriangle vertices
            // These are triangles which have a vertex number greater than nv
            for (int i = Triangle.Count - 1; i >= 0; i--)
            {
                if (Triangle[i].indexP1 >= nv || Triangle[i].indexP2 >= nv || Triangle[i].indexP3 >= nv)
                    Triangle.RemoveAt(i);
            }
            //Remove SuperTriangle vertices
            Vertex.RemoveAt(Vertex.Count - 1);
            Vertex.RemoveAt(Vertex.Count - 1);
            Vertex.RemoveAt(Vertex.Count - 1);
            Triangle.TrimExcess();
            return Triangle;
        }


        //add new points to pointList and triangulate
        public void addNewPoints(List<Coordinates.Coordinate> newProjCoordinateList)
        {
            pointList.Clear();
            foreach (Coordinates.Coordinate c in newProjCoordinateList)
            {
                pointList.Add(c.coordinatePoint);
            }                
            triangulate();
        }

        //add new points to pointList and triangulate
        public void addNewPoint(Geometry.Point newPoint)
        {
            pointList.Add(newPoint);
            triangulate();
        }

        private static bool InCircle(Geometry.Point p, Geometry.Point p1, Geometry.Point p2, Geometry.Point p3)
        {
            //Return TRUE if the point (xp,yp) lies inside the circumcircle
            //made up by points (x1,y1) (x2,y2) (x3,y3)
            //NOTE: A point on the edge is inside the circumcircle

            if (System.Math.Abs(p1.Y - p2.Y) < double.Epsilon && System.Math.Abs(p2.Y - p3.Y) < double.Epsilon)
            {
                //INCIRCUM - F - Points are coincident !!
                return false;
            }

            double m1, m2;
            double mx1, mx2;
            double my1, my2;
            double xc, yc;

            if (System.Math.Abs(p2.Y - p1.Y) < double.Epsilon)
            {
                m2 = -(p3.X - p2.X) / (p3.Y - p2.Y);
                mx2 = (p2.X + p3.X) * 0.5;
                my2 = (p2.Y + p3.Y) * 0.5;
                //Calculate CircumCircle center (xc,yc)
                xc = (p2.X + p1.X) * 0.5;
                yc = m2 * (xc - mx2) + my2;
            }
            else if (System.Math.Abs(p3.Y - p2.Y) < double.Epsilon)
            {
                m1 = -(p2.X - p1.X) / (p2.Y - p1.Y);
                mx1 = (p1.X + p2.X) * 0.5;
                my1 = (p1.Y + p2.Y) * 0.5;
                //Calculate CircumCircle center (xc,yc)
                xc = (p3.X + p2.X) * 0.5;
                yc = m1 * (xc - mx1) + my1;
            }
            else
            {
                m1 = -(p2.X - p1.X) / (p2.Y - p1.Y);
                m2 = -(p3.X - p2.X) / (p3.Y - p2.Y);
                mx1 = (p1.X + p2.X) * 0.5;
                mx2 = (p2.X + p3.X) * 0.5;
                my1 = (p1.Y + p2.Y) * 0.5;
                my2 = (p2.Y + p3.Y) * 0.5;
                //Calculate CircumCircle center (xc,yc)
                xc = (m1 * mx1 - m2 * mx2 + my2 - my1) / (m1 - m2);
                yc = m1 * (xc - mx1) + my1;
            }

            double dx = p2.X - xc;
            double dy = p2.Y - yc;
            double rsqr = dx * dx + dy * dy;
            //double r = Math.Sqrt(rsqr); //Circumcircle radius
            dx = p.X - xc;
            dy = p.Y - yc;
            double drsqr = dx * dx + dy * dy;

            return (drsqr <= rsqr);
        }
    }
}
